// Copyright (C) 2012 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

TODO(ihab.awad): Outstanding TODO items for GWTBeans

* Ensure that the generation of JavaScript tamings walks the class
  hierarchy properly.

* Add tests for array of arrays in the GWT Java classes; see if that
  works and fix if it doesn't.

* Cache static proxy objects to avoid repeat auto
  GWT.create(<proxyType>).

* Figure out how to reflect |UriCallback| into Caja GWT Java module.

* Implement "package" namespace (driven by annotation or Java
  package), for example, if the Java class is foo.bar.Baz, then the
  JavaScript should be able to see symbol 'foo' somewhere, which has a
  property 'bar', which points to an object 'Baz' which looks like a
  constructor, and all JavaScript JSOs where appropriate should appear
  to be 'instanceof' that constructor. These constructors should be
  organized in a prototypical inheritance pattern that mirrors the GWT
  Java inheritance.

* Make the recognition of Bean property patterns more robust.

* Ensure that only the instance methods (not static methods) of a GWT
  Java class are exposed on each tamed instance. Static methods don't
  make sense to tame on an instance.

* Assume GWT Java class Employee inherits from Person. If I tame an
  Employee instance using the Person taming, only the methods of
  Person get whitelisted. This is a bug: the entire Employee interface
  should be whitelisted according to the dynamic class of the object
  in question.

* The public fields of a GWT Java object should be tamed (with getters
  and setters as appropriate), not just the public methods.

