// Copyright (C) 2011 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.package com.google.caja.parser.quasiliteral;

package com.google.caja.parser.quasiliteral;

import com.google.caja.lexer.ParseException;
import com.google.common.collect.Maps;

import java.util.Map;

/**
 * {@code QuasiCache} caches the quasi trees generated by parsing strings.
 * This is a separate class rather than built into {@code QuasiBuilder}
 * because QuasiBuilder returns mutable quasi trees.
 *
 * <p>{@code QuasiCache} assumes callers will not mutate the returned quasi
 * trees, but does not enforce immutability.
 */
public class QuasiCache {
  private static Map<String, QuasiNode> cache = Maps.newHashMap();

  public static QuasiNode parse(String pattern) {
    if (cache.containsKey(pattern)) {
      return cache.get(pattern);
    }
    try {
      QuasiNode q = QuasiBuilder.parseQuasiNode(pattern);
      cache.put(pattern, q);
      return q;
    } catch (ParseException e) {
      cache.put(pattern, null);
      return null;
    }
  }
}
